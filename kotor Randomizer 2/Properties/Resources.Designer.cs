//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kotor_Randomizer_2.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("kotor_Randomizer_2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] ALLINCLUDED_modulesave {
            get {
                object obj = ResourceManager.GetObject("ALLINCLUDED_modulesave", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap BoxActive {
            get {
                object obj = ResourceManager.GetObject("BoxActive", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap BoxActUnselected {
            get {
                object obj = ResourceManager.GetObject("BoxActUnselected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap BoxSlected {
            get {
                object obj = ResourceManager.GetObject("BoxSlected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap BoxUnslected {
            get {
                object obj = ResourceManager.GetObject("BoxUnslected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done!.
        /// </summary>
        internal static string Done {
            get {
                return ResourceManager.GetString("Done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Randomization Categories Selected.
        /// </summary>
        internal static string ErrorNoRandomization {
            get {
                return ResourceManager.GetString("ErrorNoRandomization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game is not randomized!.
        /// </summary>
        internal static string ErrorNotRandomized {
            get {
                return ResourceManager.GetString("ErrorNotRandomized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] g_brakatan003 {
            get {
                object obj = ResourceManager.GetObject("g_brakatan003", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function of the randomizer is quite simple. By selecting the different categories of randomization you can enable and disable them, and adjust their settings within their respective forms. The radio buttons to the side of each category are a quick way to enable, and disable categories.
        ///
        ///The Module category randomizes the individual levels in the game. The Item randomizer randomizes the templated items aquired in the game. Music and Sounds, shuffles the audio files for the music and sounds in the game. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GeneralHelp {
            get {
                return ResourceManager.GetString("GeneralHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate Spoiler Logs.
        /// </summary>
        internal static string GenerateSpoilerLogs {
            get {
                return ResourceManager.GetString("GenerateSpoilerLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item randomization randomizes the template items in the game&apos;s key data. This means that items that are hard coded to the module will not be randomized. Which is beneifical for most plot items.
        ///
        ///Each category can be enabled or disabled by checkbox. The radio buttons cause each category to be randomized at different levels. Everything with the &apos;Max&apos; option selected will be shuffled together. Each category with &apos;Type&apos; option selected will only shuffle within itself. Each catagory with the &apos;Subtype&apos; option s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ItemHelp {
            get {
                return ResourceManager.GetString("ItemHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] k_pebn_galaxy {
            get {
                object obj = ResourceManager.GetObject("k_pebn_galaxy", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] k_plev_goto40aa {
            get {
                object obj = ResourceManager.GetObject("k_plev_goto40aa", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] k_plev_goto40ab {
            get {
                object obj = ResourceManager.GetObject("k_plev_goto40ab", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] k_ren_visionland {
            get {
                object obj = ResourceManager.GetObject("k_ren_visionland", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon Krandom {
            get {
                object obj = ResourceManager.GetObject("Krandom", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] lev40_accntl_dlg {
            get {
                object obj = ResourceManager.GetObject("lev40_accntl_dlg", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2-Dimensional Arrays Randomized.
        /// </summary>
        internal static string Log2DADone {
            get {
                return ResourceManager.GetString("Log2DADone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kotor Randomizer V2.0
        ///.
        /// </summary>
        internal static string LogHeader {
            get {
                return ResourceManager.GetString("LogHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Items Randomized.
        /// </summary>
        internal static string LogItemsDone {
            get {
                return ResourceManager.GetString("LogItemsDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Models Randomized.
        /// </summary>
        internal static string LogModelsDone {
            get {
                return ResourceManager.GetString("LogModelsDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modules Randomized.
        /// </summary>
        internal static string LogModulesDone {
            get {
                return ResourceManager.GetString("LogModulesDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sounds Randomized.
        /// </summary>
        internal static string LogMusicSoundDone {
            get {
                return ResourceManager.GetString("LogMusicSoundDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Other&apos; Randomized.
        /// </summary>
        internal static string LogOtherDone {
            get {
                return ResourceManager.GetString("LogOtherDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text Randomized.
        /// </summary>
        internal static string LogTextDone {
            get {
                return ResourceManager.GetString("LogTextDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Textures Randomized.
        /// </summary>
        internal static string LogTexturesDone {
            get {
                return ResourceManager.GetString("LogTexturesDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] m10aa {
            get {
                object obj = ResourceManager.GetObject("m10aa", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] MGINCLUDED_modulesave {
            get {
                object obj = ResourceManager.GetObject("MGINCLUDED_modulesave", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Model randomization randomly assigns new models to characters, placeables, and doors, changing how they appear in-game.
        ///
        ///The left-most checkboxes disable and enable categories.
        ///
        ///&gt; Character Models include all of the NPCs and MOBs (.utc) that are not spawned by template (such as party members, the player, and a few odd creatures). 
        ///Omit Large Models prevents characters from being randomized to some of the huge models, such as Krayt Dragon or Rancor.
        ///Omit Broken Models prevents characters from being ran [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ModelHelp {
            get {
                return ResourceManager.GetString("ModelHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mod_Entry_Area.
        /// </summary>
        internal static string ModuleEntryArea {
            get {
                return ResourceManager.GetString("ModuleEntryArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mod_Entry_X.
        /// </summary>
        internal static string ModuleEntryX {
            get {
                return ResourceManager.GetString("ModuleEntryX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mod_Entry_Y.
        /// </summary>
        internal static string ModuleEntryY {
            get {
                return ResourceManager.GetString("ModuleEntryY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mod_Entry_Z.
        /// </summary>
        internal static string ModuleEntryZ {
            get {
                return ResourceManager.GetString("ModuleEntryZ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module randomization essentially randomizes the locations of &apos;levels&apos; or &apos;maps&apos; in the game.
        ///
        ///Randomized - This list box contains the resource reference codes for all of the modules that will be randomized by the program when executed. You can find the equivalent location names for these codes on the StrategyWiki cheat page under &apos;Warp&apos;.
        ///
        ///Omitted - This list box contains the resource reference codes for all of the modules that will not be randomized. Double clicking or pressing return will transfer any  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ModuleHelp {
            get {
                return ResourceManager.GetString("ModuleHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset Loaded.
        /// </summary>
        internal static string MsgPresetLoaded {
            get {
                return ResourceManager.GetString("MsgPresetLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] NODELETE_ALLINCLUDED_modulesave {
            get {
                object obj = ResourceManager.GetObject("NODELETE_ALLINCLUDED_modulesave", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] NODELETE_MGINCLUDED_modulesave {
            get {
                object obj = ResourceManager.GetObject("NODELETE_MGINCLUDED_modulesave", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] NODELETE_modulesave {
            get {
                object obj = ResourceManager.GetObject("NODELETE_modulesave", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently the &apos;Other&apos; category holds randomization options that don&apos;t quite fit into any other category.
        ///
        ///Name Generator Rando generates and replaces the letter-combo-probabiliy files used when generating random names in-game. By seeding Line break separated text the program will generate a file that can create new names based on the text provided.
        ///	Random Pazaak Decks randomizes the cards possessed by the NPC Pazaak players beyond simply swapping around existing cards.
        ///
        ///Other Various Rando options com [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OtherHelp {
            get {
                return ResourceManager.GetString("OtherHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SWKOTOR Path is the path of your game&apos;s swkotor folder. This folder contains all the data we need to adjust for randomization to occur.
        ///
        ///Paths are usually detected automatically, however if this process does not work you will have to enter the path manually. If you are using Steam, finding this path is as simple as opening your library, right-clicking on the game, selecting properties, Local Files, and then Browse local files. From there, simply copy the path from the Address bar in file explorer, and [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PathHelp {
            get {
                return ResourceManager.GetString("PathHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] pebn_mystery {
            get {
                object obj = ResourceManager.GetObject("pebn_mystery", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset Information Coming Soon.
        ///
        ///	I need to remember how presets work before I can finish them. Ah the dread of poor commenting and taking a hiatus from a project..
        /// </summary>
        internal static string PresetHelp {
            get {
                return ResourceManager.GetString("PresetHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once your presets have been selected you can click the &apos;Randomize&apos; button to begin the randomization process. A progress bar will show the process as it goes along. When it is complete you can select &apos;Close&apos; and continue to your game whenever you&apos;re ready.
        ///	Undrandomizaing is a similar process. The program will detect if your game is currently randomized. (Note this process isn&apos;t perfect, and if something seriously went wrong you may have to manually unrandomize your game, a process Lane can help you with. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RandoHelp {
            get {
                return ResourceManager.GetString("RandoHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomization Error.
        /// </summary>
        internal static string RandomizationError {
            get {
                return ResourceManager.GetString("RandomizationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing 2-D Arrays.
        /// </summary>
        internal static string Randomizing2DA {
            get {
                return ResourceManager.GetString("Randomizing2DA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Items.
        /// </summary>
        internal static string RandomizingItems {
            get {
                return ResourceManager.GetString("RandomizingItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Models.
        /// </summary>
        internal static string RandomizingModels {
            get {
                return ResourceManager.GetString("RandomizingModels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Modules.
        /// </summary>
        internal static string RandomizingModules {
            get {
                return ResourceManager.GetString("RandomizingModules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Music and Sounds.
        /// </summary>
        internal static string RandomizingMusicSound {
            get {
                return ResourceManager.GetString("RandomizingMusicSound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Other Things.
        /// </summary>
        internal static string RandomizingOther {
            get {
                return ResourceManager.GetString("RandomizingOther", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Text.
        /// </summary>
        internal static string RandomizingText {
            get {
                return ResourceManager.GetString("RandomizingText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomizing Textures.
        /// </summary>
        internal static string RandomizingTextures {
            get {
                return ResourceManager.GetString("RandomizingTextures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seeds are used as the base for the randomization process. By having the same presets and sharing a seed with a friend, you will both recieve the same randomization.
        ///	A random seed is generated on Program start-up, however it can be changed or copied by opening the seed menu and editing the text. The Generate New Seed button can also be used to randomly change the seed..
        /// </summary>
        internal static string SeedHelp {
            get {
                return ResourceManager.GetString("SeedHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sounds and music randomizes the sound and music files. 
        ///
        ///The checkboxes enable and disable each category. The &apos;Type&apos; radio buttons keep the randomization within each category of music or sound. All categories with &apos;Max&apos; selected will have their audio files mixed in together.
        ///	&gt; Area Music is the general ambient music in each module.
        ///&gt; Battle Music is the track that the area switches to when combat begins.
        ///&gt; Ambient Noise is a type of track that is usually playing in the background of locations, such as [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SoundHelp {
            get {
                return ResourceManager.GetString("SoundHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finishing Up.
        /// </summary>
        internal static string TaskFinishing {
            get {
                return ResourceManager.GetString("TaskFinishing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text randomization can randomize some or most of the text appearing in the game. In its current state it has two main settings: Dialogue randomization and Additional Text Randomization. Dialogue randomization allows you to shuffle the entries (words spoken by NPCs), replies (options given to the MC), and match the entry sounds to the shuffled entries (So the new dialogue matches its text). 
        ///
        ///	This process is not yet foolproof. The “TalkTable” file being used for these randomizations doesn&apos;t always accurat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TextHelp {
            get {
                return ResourceManager.GetString("TextHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture randomization will shuffle most of the images stored in the selected texture pack making the game appear as a freaky hell-scape.
        ///
        ///WARNING:
        ///Texture randomization frequently results in visual experiences that may prove harmful to photosensitive users. Use with caution.
        ///
        ///NOTE: This randomization does not edit with GUI textures, only those used in 3D environments.
        ///
        ///Each category can be enabled or disabled by checkbox. The radio buttons cause each category to be randomized at different levels. Eve [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TextureHelp {
            get {
                return ResourceManager.GetString("TextureHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A 2DA, or 2-dimensional array, is a data table used by the game to store all sorts of constants from character appearance data, to AC bonus, to item properties to sound effects. This randomizer allows for certain preselected columns to be randomized, resulting in strange and fun events in-game.
        ///
        ///The left list-box is where you can select which files/arrays are being randomized. The right list-box allows you to select which columns (of those allowed) you wish to randomize.
        ///
        ///WARNING:
        ///Many of these 2DAs ha [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TwoDAHelp {
            get {
                return ResourceManager.GetString("TwoDAHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Key Table.
        /// </summary>
        internal static string UnrandomizingKeyTable {
            get {
                return ResourceManager.GetString("UnrandomizingKeyTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Lips.
        /// </summary>
        internal static string UnrandomizingLips {
            get {
                return ResourceManager.GetString("UnrandomizingLips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Modules.
        /// </summary>
        internal static string UnrandomizingModules {
            get {
                return ResourceManager.GetString("UnrandomizingModules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Music.
        /// </summary>
        internal static string UnrandomizingMusic {
            get {
                return ResourceManager.GetString("UnrandomizingMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Overrides.
        /// </summary>
        internal static string UnrandomizingOverrides {
            get {
                return ResourceManager.GetString("UnrandomizingOverrides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Sounds.
        /// </summary>
        internal static string UnrandomizingSounds {
            get {
                return ResourceManager.GetString("UnrandomizingSounds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Textures.
        /// </summary>
        internal static string UnrandomizingTextures {
            get {
                return ResourceManager.GetString("UnrandomizingTextures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrandomizing Dialog Talk Table.
        /// </summary>
        internal static string UnrandomizingTLKFile {
            get {
                return ResourceManager.GetString("UnrandomizingTLKFile", resourceCulture);
            }
        }
    }
}
